/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.patient;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import model.VitalSignHistory;

/**
 *
 * @author Shah's
 */
public class ManagePatientDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientDetailsJPanel
     */
    private JPanel userProcessContainer;
    private PersonDirectory personDirectory;
    private Person person;
    private Integer abnormalCount=0;
    public ManagePatientDetailsJPanel(JPanel userProcessContainer,PersonDirectory personDirectory) {
        initComponents();
        this.userProcessContainer= userProcessContainer;
        this.personDirectory= personDirectory;
        this.person = person;
        ArrayList<Person> personList = personDirectory.getPersonHistoryDirectory();
        populatePatientsTable(personDirectory.getPersonHistoryDirectory());
    }
    
    private void populatePatientsTable(ArrayList<Person> personsList) {
        DefaultTableModel model = (DefaultTableModel) tblPatientTable.getModel();
        model.setRowCount(0);
        if(personsList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Person person : personsList) {
            Object[] row = new Object[6];
            row[0] = person;
            row[1]= person.getPersonName();
            row[2] = person.getAge();
            row[3] = person.getCity();
            row[4] = person.getCommunity();
            row[5] = person.getHouse();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnRefreshTable = new javax.swing.JButton();
        btnAddVitals = new javax.swing.JButton();
        btnDsplyEnHistory = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEncounterData = new javax.swing.JTable();
        btnViewVitals = new javax.swing.JButton();
        btnEditVitals = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnViewAbnormlCases = new javax.swing.JButton();
        jComboCommunity = new javax.swing.JComboBox<>();
        txtAbnormalCases = new javax.swing.JTextField();

        tblPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Age", "City", "Community", "House"
            }
        ));
        jScrollPane1.setViewportView(tblPatientTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 27)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Patient Details");

        btnRefreshTable.setText("Refresh Table");
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        btnAddVitals.setText("Add Vital Signs");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        btnDsplyEnHistory.setText("Display Encounter History");
        btnDsplyEnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDsplyEnHistoryActionPerformed(evt);
            }
        });

        tblEncounterData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter Data", "Status", "Community"
            }
        ));
        jScrollPane2.setViewportView(tblEncounterData);

        btnViewVitals.setText("View Vitals");
        btnViewVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVitalsActionPerformed(evt);
            }
        });

        btnEditVitals.setText("Edit Vitals");
        btnEditVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditVitalsActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Vital");

        jButton4.setText("Refresh Table");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnViewAbnormlCases.setText("View Abnormal Cases");
        btnViewAbnormlCases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAbnormlCasesActionPerformed(evt);
            }
        });

        jComboCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Huntington Avenue", "Long wood", "City View" }));

        txtAbnormalCases.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewVitals)
                                .addGap(52, 52, 52)
                                .addComponent(btnEditVitals)
                                .addGap(66, 66, 66)
                                .addComponent(jButton3))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRefreshTable, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddVitals)
                                        .addGap(43, 43, 43)
                                        .addComponent(btnDsplyEnHistory))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnViewAbnormlCases)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtAbnormalCases, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 109, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(btnRefreshTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDsplyEnHistory)
                    .addComponent(btnAddVitals))
                .addGap(30, 30, 30)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewVitals)
                    .addComponent(btnEditVitals)
                    .addComponent(jButton3))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewAbnormlCases)
                    .addComponent(txtAbnormalCases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(157, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        // TODO add your handling code here:
        populatePatientsTable(personDirectory.getPersonHistoryDirectory());
        
    }//GEN-LAST:event_btnRefreshTableActionPerformed

    private void populateEncounterTable(Person person){
        DefaultTableModel model = (DefaultTableModel) tblEncounterData.getModel();
        model.setRowCount(0);
        if (person != null) {
            int patientAge = person.getAge();
            ArrayList<VitalSigns> vitalSignList = person.getVitalSignHistory().getHistory();
            
            if (vitalSignList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found. Please"
                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            for (VitalSigns vitalSign : vitalSignList) {
                Object[] row = new Object[3];
                row[0] = vitalSign;
                row[1] = VitalSignStatus(patientAge, vitalSign);
                row[2] = person.getCommunity();
                model.addRow(row);
            }
        }else{
            //JOptionPane.showMessageDialog(this, "No Data!!!!!!!!!");
        }
    }
    
    private String VitalSignStatus(int patientAge, VitalSigns vitalSign) {
        String vitalSignStatus = "Normal";
        
        double respirationRate = vitalSign.getRespiratoryRate();
        double heartRate = vitalSign.getHeartRate();
        double bloodPressure = vitalSign.getBloodPressure();
        double weight = vitalSign.getWeight();
        
        /*Toddler*/
        if (patientAge >= 1 && patientAge <= 3) {
            if ((respirationRate < 20 || respirationRate > 30) /*Respiration Rate*/
                    || (heartRate < 80 || heartRate > 130) /*Heart Rate*/
                    || (bloodPressure < 80 || bloodPressure > 110) /*Blood Pressure*/
                    || (weight < 22 || weight > 31)) /*Weight*/ {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Preschooler*/
        if (patientAge >= 4 && patientAge <= 5) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 80 || heartRate > 120)
                    || (bloodPressure < 80 || bloodPressure > 110)
                    || (weight < 31 || weight > 40)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*School Age*/
        if (patientAge >= 6 && patientAge <= 12) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 70 || heartRate > 110)
                    || (bloodPressure < 80 || bloodPressure > 120)
                    || (weight < 41 || weight > 92)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Adolescent*/
        if (patientAge >= 13) {
            if ((respirationRate < 12 || respirationRate > 20)
                    || (heartRate < 55 || heartRate > 105)
                    || (bloodPressure < 110 || bloodPressure > 120)
                    || (weight < 110)) {
                vitalSignStatus = "Abnormal";
            }
        }
        return vitalSignStatus;
    }
    
    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRow= tblPatientTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", 
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person=(Person) tblPatientTable.getValueAt(selectedRow, 0);
        AddPatientVitalSigns apv = new AddPatientVitalSigns(userProcessContainer,person);
        userProcessContainer.add("apJpanel", apv);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatientTable.getSelectedRow();
        Person person = (Person) tblPatientTable.getValueAt(selectedRow, 0);
        populateEncounterTable(person);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnDsplyEnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDsplyEnHistoryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatientTable.getSelectedRow();
        Person person = (Person) tblPatientTable.getValueAt(selectedRow, 0);
        populateEncounterTable(person);
    }//GEN-LAST:event_btnDsplyEnHistoryActionPerformed

    private void btnViewVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEncounterData.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vitalSign = (VitalSigns) tblEncounterData.getValueAt(selectedRow, 0);
        ViewEditVitalSignJPanel vevs = new ViewEditVitalSignJPanel(userProcessContainer,
                vitalSign, Boolean.FALSE);
        userProcessContainer.add("vevs", vevs);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewVitalsActionPerformed

    private void btnEditVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditVitalsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEncounterData.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vitalSign = (VitalSigns) tblEncounterData.getValueAt(selectedRow, 0);
        ViewEditVitalSignJPanel vevs = new ViewEditVitalSignJPanel(userProcessContainer,
                vitalSign, Boolean.TRUE);
        userProcessContainer.add("vevs", vevs);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnEditVitalsActionPerformed

    private void btnViewAbnormlCasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAbnormlCasesActionPerformed
        // TODO add your handling code here:
//        abnormalCount = viewAbnormalCount();
//        
//        if(abnormalCount == 0){
//            txtAbnormalCases.setText("0");
//        }else{
//            txtAbnormalCases.setText(abnormalCount.toString());
//        }
        
        List<Person> personInGivenCommunity;
        personInGivenCommunity = personDirectory.getPersonHistoryDirectory().stream()
        .filter(p -> p.getCommunity().equals(jComboCommunity.getSelectedItem().toString()))
        .collect(Collectors.toList());
        int abnormalBPCount = 0;
        for(Person person: personInGivenCommunity){
            VitalSignHistory vitalSignDirectory = person.getVitalSignHistory();
            List<VitalSigns> vitalSignLogs = vitalSignDirectory
            .getHistory();
            Collections.sort(vitalSignLogs, (a,b) -> b.getTimestamp()
            .compareTo(a.getTimestamp()));
            if(!vitalSignLogs.isEmpty()){
                VitalSigns vSign = vitalSignLogs.get(0);
                String healthStatus = VitalSignStatus(person.getAge(),vSign);
                if(healthStatus.equals("Abnormal")){
                    abnormalBPCount++;
                }
            }
        }
        txtAbnormalCases.setText(String.valueOf(abnormalBPCount));
    }//GEN-LAST:event_btnViewAbnormlCasesActionPerformed

    private int viewAbnormalCount(){
        int vitalCount = 0;
        int size = personDirectory.getPersonHistoryDirectory().size();
        //System.out.println(personDirectory.getPersonHistoryDirectory().get(i).getVitalSignHistory().getHistory().size());
        //System.out.println(size);
        for(int i=0; i<size;i++){
            //System.out.println("first");
            //int count = 0;
            String community = jComboCommunity.getSelectedItem().toString();
            //System.out.println(community);
            if(personDirectory.getPersonHistoryDirectory().get(i).getCommunity().toString() == community){
                //System.out.println("inside first if" + community);
                for(int k=0; k<personDirectory.getPersonHistoryDirectory().get(i).getVitalSignHistory().getHistory().size();k++){
                    //System.out.println("inside second for loop");
                    double abc = personDirectory.getPersonHistoryDirectory().get(i).getVitalSignHistory().getHistory().get(k).getBloodPressure();                       
                    if(abc == 80.0 ){
                        //System.out.println("abnormal case");
                        vitalCount = vitalCount +1;
                        break;
                    }    
                } 
            }
        }
        return vitalCount;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnDsplyEnHistory;
    private javax.swing.JButton btnEditVitals;
    private javax.swing.JButton btnRefreshTable;
    private javax.swing.JButton btnViewAbnormlCases;
    private javax.swing.JButton btnViewVitals;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEncounterData;
    private javax.swing.JTable tblPatientTable;
    private javax.swing.JTextField txtAbnormalCases;
    // End of variables declaration//GEN-END:variables
}